package golem

import "fmt"

type Fn struct {
  proc func(*Env, []Value)Value
  name *Sym
}

func NewFn(name *Sym, proc func(*Env, []Value)Value) *Fn {
  return &Fn{name: name, proc: proc}
}

func (f *Fn) String() string {
  if f.name != nil {
    return fmt.Sprintf("#<fn: %s>", f.name)
  } else {
    return fmt.Sprintf("#<fn@ %p>", f)
  }
}

func (f *Fn) Type() Value {
  return Intern("fn")
}

func (f *Fn) Apply(e *Env, v Value) Value {
  args := ToVec(v)
  return f.proc(e, args)
}

#import "macros.gpp"

@func "applicable?" 1 1 {
  if @is_a(args[0], Applicator) {
    return T
  } else {
    return Nil
  }
}

@func "catch" 1 1 {
  @arg fn 0 Applicator
  _ = fn
  return Nil
}

@func "unwind-protect" 2 2 {
  defer Apply(env, args[1], Nil)
  return Apply(env, args[0], Nil)
}
