#define try ... {
  @...
  if err != nil {
    panic(err)
  }
}

#define try_ok ... {
  @...
  if !ok {
    panic("bad-type")
  }
}

#define arg var num type {
  arg@num, ok := args[@num].(@type)
  @var := arg@num
  if !ok {
    panic("bad-type")
  }
}

#define is_a var typ {
  _, ok := @var.(@typ); ok
}

#define it_is_a var val typ {
  @var, ok := @val.(@typ); ok
}

#define func name min max body {
func init() {
  Core.Function("@name", func(env *Env, args[]Value) (result Value) {
    CheckArgs("@name", @min, @max, args)
    @body
  })
}
}

#define type_predicate name type {
  @func @name 1 1 {
    if @is_a(args[0], @type) {
      return T
    } else {
      return Nil
    }
  }
}

#define compare op {
  @func "@op" 1 -1 {
    #define icase type aconv bconv {case @type: if !(@aconv(a) @op @bconv(b)) { return Nil }}
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        @icase(Int, , )
        @icase(Float, Float, )
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        @icase(Int, , Float)
        @icase(Float, , )
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
      result = arg
    }
    return
  }
}
