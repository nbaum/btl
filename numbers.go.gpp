package golem

import (
  "math"
  "fmt"
)

#import "macros.gpp"

#define operator op {
  @func "@op" 1 -1 {
    #define icase atype btype aconv bconv { case @btype: result = @atype(@aconv(a) @op @bconv(b)) }
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        @icase(Int, Int, , )
        @icase(Float, Float, Float, )
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        @icase(Float, Int, , Float)
        @icase(Float, Float, , )
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
    }
    return
  }
}

#define unary_func name Name {
  @func @name 1 1 {
    @arg f 0 Float
    return Float(math.@Name(float64(f)))
    panic("bad-type")
  }
}

@func "number?" 1 1 {
  if @is_a(args[0], Int) {
    return T
  }
  if @is_a(args[0], Float) {
    return T
  }
  return Nil
}

@func "exact?" 1 1 {
  if @is_a(args[0], Int) {
    return T
  }
  @try_ok _, ok := args[0].(Float)
  return Nil
}

@func "nan?" 1 1 {
  if @is_a(args[0], Int) {
    return Nil
  }
  @try_ok f, ok := args[0].(Float)
  if math.IsNaN(float64(f)) {
    return T
  } else {
    return Nil
  }
}

@operator +

@operator -

@operator *

@operator /

@func "%" 1 -1 {
	result = args[0]
	for _, arg := range args[1:] {
		switch a := result.(type) {
		case Int:
			switch b := arg.(type) {
			case Int:
				result = Int(a % b)
			case Float:
				result = Float(math.Mod(float64(a), float64(b)))
			default:
				panic("bad-type")
			}
		case Float:
			switch b := args[1].(type) {
			case Int:
				result = Float(math.Mod(float64(a), float64(b)))
			case Float:
				result = Float(math.Mod(float64(a), float64(b)))
			default:
				panic("bad-type")
			}
		default:
			panic("bad-type")
		}
	}
	return
}

@func "abs" 1 1 {
  if @it_is_a(f, args[0], Float) {
		return Float(math.Abs(float64(f)))
	}
  @arg i 0 Int
  if i < 0 {
    return Int(-i)
  }
  return i
}

@unary_func "floor" Floor

@unary_func "trunc" Trunc

@unary_func "ceil" Ceil

@unary_func "sin" Sin

@unary_func "cos" Cos

@unary_func "tan" Tan

@unary_func "asin" Asin

@unary_func "acos" Acos

@unary_func "atan" Atan

@func "num->str" 1 1 {
  if @it_is_a(i, args[0], Int) {
    return Str(fmt.Sprintf("%d", i))
  }
  @arg f 0 Float
  return Str(fmt.Sprintf("%f", f))
}

@func "str->num" 1 1 {
  @arg str 0 Str
  if v := tryAtomAsNumber(string(str)); v != nil {
    return v
  }
  panic("bad-syntax")
}
