package golem

import (
  "math"
  "fmt"
)


func init() {
  Core.Function("number?", func(env *Env, args[]Value) (result Value) {
    CheckArgs("number?", 1, 1, args)
    if _, ok := args[0].(Int); ok  {
    return T
  }
  if _, ok := args[0].(Float); ok  {
    return T
  }
  return Nil
})
}

func init() {
  Core.Function("exact?", func(env *Env, args[]Value) (result Value) {
    CheckArgs("exact?", 1, 1, args)
    if _, ok := args[0].(Int); ok  {
    return T
  }
  if _, ok := args[0].(Float); ok  {
    return Nil
  }
  panic("bad-type")
})
}

func init() {
  Core.Function("nan?", func(env *Env, args[]Value) (result Value) {
    CheckArgs("nan?", 1, 1, args)
    if _, ok := args[0].(Int); ok  {
    return Nil
  }
  if it, ok := args[0].(Float); ok  {
    if math.IsNaN(float64(it)) {
      return T
    } else {
      return Nil
    }
  }
  panic("bad-type")
})
}

func init() {
  Core.Function("+", func(env *Env, args[]Value) (result Value) {
    CheckArgs("+", 1, -1, args)
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        case Int: result = Int((a) + (b)) 
        case Float: result = Float(Float(a) + (b)) 
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        case Int: result = Float((a) + Float(b)) 
        case Float: result = Float((a) + (b)) 
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
    }
    return
  })
}

func init() {
  Core.Function("-", func(env *Env, args[]Value) (result Value) {
    CheckArgs("-", 1, -1, args)
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        case Int: result = Int((a) - (b)) 
        case Float: result = Float(Float(a) - (b)) 
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        case Int: result = Float((a) - Float(b)) 
        case Float: result = Float((a) - (b)) 
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
    }
    return
  })
}

func init() {
  Core.Function("*", func(env *Env, args[]Value) (result Value) {
    CheckArgs("*", 1, -1, args)
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        case Int: result = Int((a) * (b)) 
        case Float: result = Float(Float(a) * (b)) 
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        case Int: result = Float((a) * Float(b)) 
        case Float: result = Float((a) * (b)) 
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
    }
    return
  })
}

func init() {
  Core.Function("/", func(env *Env, args[]Value) (result Value) {
    CheckArgs("/", 1, -1, args)
    result = args[0]
    for _, arg := range args[1:] {
      switch a := result.(type) {
      case Int:
        switch b := arg.(type) {
        case Int: result = Int((a) / (b)) 
        case Float: result = Float(Float(a) / (b)) 
        default:
          panic("bad-type")
        }
      case Float:
        switch b := args[1].(type) {
        case Int: result = Float((a) / Float(b)) 
        case Float: result = Float((a) / (b)) 
        default:
          panic("bad-type")
        }
      default:
        panic("bad-type")
      }
    }
    return
  })
}


func init() {
  Core.Function("%", func(env *Env, args[]Value) (result Value) {
    CheckArgs("%", 1, -1, args)
    accum := args[0]
  for _, arg := range args[1:] {
    switch a := accum.(type) {
    case Int:
      switch b := arg.(type) {
      case Int:
        accum = Int(a % b)
      case Float:
        accum = Float(math.Mod(float64(a), float64(b)))
      default:
        panic("bad-type")
      }
    case Float:
      switch b := args[1].(type) {
      case Int:
        accum = Float(math.Mod(float64(a), float64(b)))
      case Float:
        accum = Float(math.Mod(float64(a), float64(b)))
      default:
        panic("bad-type")
      }
    default:
      panic("bad-type")
    }
  }
  return accum
})
}

func init() {
  Core.Function("abs", func(env *Env, args[]Value) (result Value) {
    CheckArgs("abs", 1, 1, args)
    if it, ok := args[0].(Int); ok  {
      return Int(math.Abs(float64(it)))
    }
    if it, ok := args[0].(Float); ok  {
      return Float(math.Abs(float64(it)))
    }
    panic("bad-type")
  })
}

func init() {
  Core.Function("floor", func(env *Env, args[]Value) (result Value) {
    CheckArgs("floor", 1, 1, args)
    if it, ok := args[0].(Int); ok  {
      return Int(math.Floor(float64(it)))
    }
    if it, ok := args[0].(Float); ok  {
      return Float(math.Floor(float64(it)))
    }
    panic("bad-type")
  })
}

func init() {
  Core.Function("truncate", func(env *Env, args[]Value) (result Value) {
    CheckArgs("truncate", 1, 1, args)
    if it, ok := args[0].(Int); ok  {
      return Int(math.Trunc(float64(it)))
    }
    if it, ok := args[0].(Float); ok  {
      return Float(math.Trunc(float64(it)))
    }
    panic("bad-type")
  })
}

func init() {
  Core.Function("ceiling", func(env *Env, args[]Value) (result Value) {
    CheckArgs("ceiling", 1, 1, args)
    if it, ok := args[0].(Int); ok  {
      return Int(math.Ceil(float64(it)))
    }
    if it, ok := args[0].(Float); ok  {
      return Float(math.Ceil(float64(it)))
    }
    panic("bad-type")
  })
}


func init() {
  Core.Function("number->string", func(env *Env, args[]Value) (result Value) {
    CheckArgs("number->string", 1, 1, args)
    if it, ok := args[0].(Int); ok  {
    return Str(fmt.Sprintf("%d", it))
  }
  if it, ok := args[0].(Float); ok  {
    return Str(fmt.Sprintf("%f", it))
  }
  panic("bad-type")
})
}

func init() {
  Core.Function("string->number", func(env *Env, args[]Value) (result Value) {
    CheckArgs("string->number", 1, 1, args)
    str, ok := args[0].(Str)
  if !ok {
    panic("bad-type")
  }

  if v := tryAtomAsNumber(string(str)); v != nil {
    return v
  }
  panic("bad-syntax")
})
}
