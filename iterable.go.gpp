package golem

type Iterable interface {
  Value
  Length() int
  Ref(int) Value
  SetRef(int, Value)
  Slice(int, int) Iterable
}


func init() {
  Core.Function("iterable?", func(env *Env, args[]Value) (result Value) {
    CheckArgs("iterable?", 1, 1, args)
    if _, ok := args[0].(Iterable); ok  {
    return T
  } else {
    return Nil
  }
})
}

func init() {
  Core.Function("length", func(env *Env, args[]Value) (result Value) {
    CheckArgs("length", 1, 1, args)
    it, ok := args[0].(Iterable)
  if !ok {
    panic("bad-type")
  }

  return Int(it.Length())
})
}

func init() {
  Core.Function("slice", func(env *Env, args[]Value) (result Value) {
    CheckArgs("slice", 3, 3, args)
    it, ok := args[0].(Iterable)
  if !ok {
    panic("bad-type")
  }

  start, ok := args[1].(Int)
  if !ok {
    panic("bad-type")
  }

  end, ok := args[2].(Int)
  if !ok {
    panic("bad-type")
  }

  return it.Slice(int(start), int(end))
})
}

func init() {
  Core.Function("nth", func(env *Env, args[]Value) (result Value) {
    CheckArgs("nth", 2, 2, args)
    it, ok := args[0].(Iterable)
  if !ok {
    panic("bad-type")
  }

  idx, ok := args[1].(Int)
  if !ok {
    panic("bad-type")
  }

  return it.Ref(int(idx))
})
}

func init() {
  Core.Function("nth=", func(env *Env, args[]Value) (result Value) {
    CheckArgs("nth=", 3, 3, args)
    it, ok := args[0].(Iterable)
  if !ok {
    panic("bad-type")
  }

  idx, ok := args[1].(Int)
  if !ok {
    panic("bad-type")
  }

  it.SetRef(int(idx), args[2])
  return args[2]
})
}
